#####################################################################
[files]
naming convention:
    - Files are named after game genres. This acts as an initial
    layer for organizing mechanical ideas. Files could also be named
    based on other ways to group the mechanics if the game genre
    isn't automatically apparent, or the mechanic can be attributed
    to multiple game genres.
    - File names should not use acronyms and instead use the full,
    descriptive words.
        i.e. MOBA.config --> multiplayer_online_battle_arena.config

contents:
    Files contain as-bare-bones-as-possible definitions of in-game
    mechanics to act as a jump off point in defining dynamics that
    bring about certain aesthetics.

#####################################################################
[meta.mechanics]
sections:
    - Each section should be a mechanic name.
    - If a mechanic is a variant of an existing mechanic, the section
    name should be in the following form:
        "mechanic_name.####", where '####' is substituted with
        digits.
        - allows for up to 10,000 mechanic variants. If this limit is
        reached, a backwards-compatible naming convention should be
        developed.

all options:
    It is expected that each option, once it has been defined, should
    include a short description as to why it is defined as the way it
    is. Preferably, the section should have its value defined, and then
    the why section, following a delimeter of some sort, should be
    defined thusly:
    <why>
    text
    </why>

required options:
    Each mechanic should have the following options defined:
        Inputs:
            A defined interface that can be mapped to any combination
            of the following:
                # Static
                - The current state of a single or compound,
                non-player entity
                - The current state of the game
                - The current state of the player
                # Delta
                - A change in the state of a single or compound,
                non-player entity
                - A change in the state of the game
                - A change in the state of the player
                # Abstract
                - A single or grouped player action
                - A sequence of single or grouped player actions
            The inputs of a mechanic inform the way in which a
            mechanic triggers, or triggers at all.
            Analogous to ACTION POTENTIAL in a neuron.
        Instant Outputs:
            A defined interface that can be mapped to the following:
                - A change in the state of a single or compound,
                non-player entity.
                - A change in the game state
                - A change in the player state
            Note:
                - Mechanic to Mechanic interactions are defined in
                their respective dynamics combinations.
            A mechanic, once triggered, must always activate its
            outputs.
            Analogous to the all-or-nothing ACTION POTENTIAL
            mechanics present in neurons.
        Response:
            The DESIRED Player response(s) to the change in player
            or game state(s)
            Note:
                - DESIRED mechanic influences on player decision-
                making and response to the outcomes of those
                mechanics are defined in their respective dynamics
                combinations in terms of those combinations.
        Activation:
            A word or set of words to describe the criteria that
            need to be filled in order for the mechanic to activate.
            This option should only include members within the
            following enumeration:
                - None
                    DEFAULT
                - State Attribute Comparisons:
                state.attribute __ <state.attribute/literal_value>
                    WHERE __ is equal to any of the following:
                        = > < !=
                - Player action/ player action status
                    Was the action successful? To which degree?
            Any of these activation criteria can be compounded with
            logical operators:
                AND, OR, NOT, NAND, NOR, XOR, XNOR
        Duration:
            Any length of time within which the mechanic is executing
            its function. The default value is "None", which is
            analogous to an instant.
        Step:
            Any length of time within which the mechanic is executing
            the SUB-steps of its function should they be defined in a
            loop. The default value is "None", which is analogous to
            a single step mechanic, or, a mechanic whose sub-steps
            are executed in quick succession.
        Cooldown:
            Any length of time after which the mechanic is able to
            execute its function again. The default value is "None",
            which is analogous to continuous execution.
        Notes:
            Just some general notes, a probable placeholder for
            future option ideas.
        ACTION.action_name:
            A *general* description of a player action used in the
            definition of the mechanic.
        ENTITY.entity_name:
            A *general* description of any entities used in the
            definition of the mechanic.

optional options:
    Each mechanic can have the following options defined, but
    does not need them defined in order to be a well-defined
    mechanic. These options are typically defined near the top
    of the mechanic definition, and serve as helpful meta-data
    on that mechanic.
        Gist:
            A short description of a mechanical idea designed to
            communicate the overall feeling of the mechanic. The
            gist can venture into what would otherwise be
            dynamic or aesthetic territory to communicate an idea,
            but should not use this information when defining the
            mechanic.
        Parent:
            A well-defined mechanic name from which the mechanic
            inherits all of its option values that can be overwritten
            if need-be.

#####################################################################
[glossary]
action:
    A discrete or prolonged event dependent on player input.

compound entity:
    A collection of entities. Can contain other compound entities.

grouped player action:
    An action requiring the coordination of multiple players in its
    execution.

mechanic:
    Describes the particular components of the game, at the level of
    data representation and algorithms.
    A mechanic may have 0 inputs XOR 0 outputs.
        - A mechanic with 0 inputs and at least 1 output is
        either a constant or a random force that influences those
        outputs.
        - A mechanic with at least 1 input and 0 outputs is
        an observer of the game which functions outside of it.
        Observers can be used to gather data and present it to
        the player or developers, which can then be analyzed to
        discover trends, allowing for an evolution in play/
        design, respectively.
            - Additionally, a mechanic with 0 outputs
            necessarily has 0 outputs in terms of interacting
            with the game itself, but can still have extra-
            digital interactions with outside data stores
            and programs.
        - A mechanic with 0 inputs and 0 outputs can neither
        observe nor act on those observations, and are thus
        considered undefined.

player:
    A thinking agent that is acting within the pre-defined
    constraints of the game. Can be human or AI.

player attribute:
    Similar to objects in programming languages, a player's state
    is defined by the collective value of their attributes.
    Attribute types should remain relatively simple for most
    cases:
        - number
        - string
        - list

player state:
    A collection of attributes with discrete values. These attributes
    include a list of the possible actions that the player can
    execute.

well-defined mechanic:
    A mechanic which is sufficiently defined in that all of its
    required options are filled out and understandable.
